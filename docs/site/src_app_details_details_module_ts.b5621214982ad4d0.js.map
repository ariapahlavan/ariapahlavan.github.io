{"version":3,"file":"src_app_details_details_module_ts.b5621214982ad4d0.js","mappings":"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","names":["FunctionalProgrammingComponent","constructor","this","require","ngOnInit","section1","replaceAll","env","selectors","i0","ReactiveProgrammingComponent","PwaWorkboxComponent","NginxRecaptchaComponent","DetailsComponent","http","Position","contentPath","window","location","search","replace","cms$","get","contentUrl","pipe","map","toPublishedOnly","onload","event","onerror","console","error","isReady","content","publishedOnly","markdownUrl","url","hasLink","link","textOf","date","startDate","endDate","hasDate","of","templates","type","ContentType","position","isFull","isLeft","isRight","isHalf","pos","imageUrlOf","urlOf","core","SMOOTH_ENTRANCE_2","elements","changeDetection","routes","path","component","DetailsRoutingModule","RouterModule","DetailsModule","CommonModule","HttpClientModule","SharedModule","MarkdownModule"],"sourceRoot":"webpack:///","sources":["./src/app/details/pages/functional-programming/functional-programming.component.ts","./src/app/details/pages/functional-programming/functional-programming.component.html","./src/app/details/pages/reactive-programming/reactive-programming.component.ts","./src/app/details/pages/reactive-programming/reactive-programming.component.html","./src/app/details/pages/pwa-workbox/pwa-workbox.component.ts","./src/app/details/pages/pwa-workbox/pwa-workbox.component.html","./src/app/details/pages/nginx-recaptcha/nginx-recaptcha.component.ts","./src/app/details/details.component.html","./src/app/details/pages/nginx-recaptcha/nginx-recaptcha.component.html","./src/app/details/details.component.ts","./src/app/details/details-routing.module.ts","./src/app/details/details.module.ts","./src/app/details/pages/functional-programming/sections/section-1.md","./src/app/details/pages/nginx-recaptcha/sections/section-1.md","./src/app/details/pages/pwa-workbox/sections/section-1.md","./src/app/details/pages/reactive-programming/sections/section-1.md"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { environment as env } from '../../../../environments/environment';\n\n@Component({\n  selector: 'app-functional-programming',\n  templateUrl: './functional-programming.component.html',\n  styleUrls: ['./functional-programming.component.scss']\n})\nexport class FunctionalProgrammingComponent implements OnInit {\n  section1 = require('!raw-loader!./sections/section-1.md').default;\n\n  constructor() { }\n\n  ngOnInit(): void {\n    this.section1 = this.section1.replaceAll(/\\/assets/g, env.assetsPath);\n  }\n}\n","<markdown>{{section1}}</markdown>\n","import { Component, OnInit } from '@angular/core';\nimport { environment as env } from '../../../../environments/environment';\n\n@Component({\n  selector: 'app-reactive-programming',\n  templateUrl: './reactive-programming.component.html',\n  styleUrls: ['./reactive-programming.component.scss']\n})\nexport class ReactiveProgrammingComponent implements OnInit {\n  section1 = require('!raw-loader!./sections/section-1.md').default;\n\n  constructor() { }\n\n  ngOnInit(): void {\n    this.section1 = this.section1.replaceAll(/\\/assets/g, env.assetsPath);\n  }\n\n}\n","<markdown>{{section1}}</markdown>\n","import { Component, OnInit } from '@angular/core';\n\nimport { environment as env } from '../../../../environments/environment';\n\n@Component({\n  selector: 'app-pwa-workbox',\n  templateUrl: './pwa-workbox.component.html',\n  styleUrls: ['./pwa-workbox.component.scss']\n})\nexport class PwaWorkboxComponent implements OnInit {\n  section1 = require('!raw-loader!./sections/section-1.md').default;\n\n\n  constructor() { }\n\n  ngOnInit(): void {\n    this.section1 = this.section1.replaceAll(/\\/assets/g, env.assetsPath);\n  }\n\n}\n","<markdown>{{section1}}</markdown>\n","import { Component, OnInit } from '@angular/core';\n\nimport { environment as env } from '../../../../environments/environment';\n\n@Component({\n  selector: 'app-nginx-recaptcha',\n  templateUrl: './nginx-recaptcha.component.html',\n  styleUrls: ['./nginx-recaptcha.component.scss']\n})\nexport class NginxRecaptchaComponent implements OnInit {\n  section1 = require('!raw-loader!./sections/section-1.md').default;\n\n\n  constructor() { }\n\n  ngOnInit(): void {\n    this.section1 = this.section1.replaceAll(/\\/assets/g, env.assetsPath);\n  }\n\n}\n","<div class=\"wrapper mat-typography\" *ngIf=\"cms$ | async as cms\">\n  <div [@pageAnimations]=\"cms?.length\" class=\"content\">\n    <ng-container *ngFor=\"let content of cms\">\n      <ng-container *ngIf=\"isReady(content)\">\n        <ng-container\n          *ngTemplateOutlet=\"\n          of(content, [none, markdown, teaser, header, survey, component]);\n          context: {$implicit: content}\">\n        </ng-container>\n      </ng-container>\n    </ng-container>\n  </div>\n</div>\n\n<ng-template #header let-content>\n  <div class=\"full-row mat-display-1 mb0\">{{content['title']}}</div>\n  <h2 class=\"self-align-center mb0\" [ngClass]=\"{'force-left-half': hasDate(content), 'full-row': !hasDate(content)}\">{{content['subTitle']}}</h2>\n  <h5 *ngIf=\"hasDate(content)\" class=\"force-right-half self-align-center self-justify-end mb0\">{{date(content)}}</h5>\n  <markdown class=\"full-row mt2 mb2\">{{'---'}}</markdown>\n</ng-template>\n\n<ng-template #markdown let-content>\n  <div markdown lineNumbers\n       [src]=\"markdownUrl(content)\"\n       (load)=\"onload($event)\"\n       [ngClass]=\"{'full-row': isFull(content), 'left-half': isLeft(content), 'right-half': isRight(content)}\"\n       (error)=\"onerror($event)\">\n  </div>\n</ng-template>\n\n<ng-template #teaser let-content>\n  <div *ngIf=\"hasLink(content.images)\" class=\"self-justify-center hide-overflow teaser\"\n       [ngClass]=\"{'full-row': isFull(content), 'left-half': isLeft(content), 'right-half': isRight(content)}\">\n    <img [class.full-teaser-img]=\"isFull(content)\"\n         [class.half-teaser-img]=\"isHalf(content)\"\n         [src]=\"imageUrlOf(content.images[0])\"\n         [alt]=\"textOf(content.images[0])\">\n  </div>\n</ng-template>\n\n<ng-template #survey let-content>\n  <app-survey class=\"full-row  mt2 mb2\" [content]=\"content\"></app-survey>\n</ng-template>\n\n<ng-template #component let-content>\n  <div class=\"full-row\">\n    <ng-container [ngSwitch]=\"content.id\">\n      <app-functional-programming *ngSwitchCase=\"'fp'\"></app-functional-programming>\n      <app-reactive-programming  *ngSwitchCase=\"'rp'\"></app-reactive-programming>\n      <app-pwa-workbox *ngSwitchCase=\"'pwa-workbox'\"></app-pwa-workbox>\n      <app-nginx-recaptcha *ngSwitchCase=\"'nginx-recaptcha'\"></app-nginx-recaptcha>\n      <!--PLACEHOLDER-->\n      <div *ngSwitchDefault>\n        <ng-container *ngTemplateOutlet=\"none\"></ng-container>\n      </div>\n    </ng-container>\n  </div>\n</ng-template>\n\n<ng-template #none>\n  <h1 class=\"full-row\">Something went wrong ðŸ¥´</h1>\n</ng-template>\n","<markdown>{{section1}}</markdown>\n","import { ChangeDetectionStrategy, Component, OnInit, TemplateRef } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { environment as env } from '../../environments/environment';\nimport { Content, ContentType, Link, MarkdownContent, Position, Positionable } from '../posts/constants/content.interface';\nimport { Observable } from 'rxjs';\nimport { SMOOTH_ENTRANCE_2 } from '../shared/constants/animations-triggers';\nimport { hasLink, isReady, publishedOnly, textOf, urlOf } from '../shared/helpers/content.helper';\nimport { map, tap } from 'rxjs/operators';\nimport { logger } from 'codelyzer/util/logger';\n\n@Component({\n  selector: 'app-details',\n  templateUrl: './details.component.html',\n  styleUrls: ['./details.component.scss'],\n  animations: [\n    SMOOTH_ENTRANCE_2({\n      elements: '.full-row, .left-cell, .right-cell, .left-half, .right-half, .left-mid-cell, .right-mid-cell, .middle, .force-left-half, .force-right-half, .force-left-cell, .force-right-cell'\n    })\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DetailsComponent implements OnInit {\n  contentPath: string;\n  cms$: Observable<Content[]>;\n  pos = Position;\n\n  get contentUrl(): string {\n    return `${env.assetsPath}${this.contentPath}`;\n  }\n\n  constructor(private http: HttpClient) {\n    this.contentPath\n      = window.location.search\n      .replace('?filepath=', '');\n    this.cms$\n      = this.http\n      .get<[]>(this.contentUrl)\n      .pipe(map(this.toPublishedOnly()));\n  }\n\n  ngOnInit(): void {\n  }\n\n  onload(event) {\n  }\n\n  onerror(event) {\n    console.error('on error:', event);\n  }\n\n  isReady(content: Content) {\n    return isReady(content);\n  }\n\n  toPublishedOnly() {\n    return publishedOnly();\n  }\n\n  markdownUrl(content: MarkdownContent) {\n    return `${env.assetsPath}${content.url}`;\n  }\n\n  hasLink(link: Link[]) {\n    return hasLink(link);\n  }\n\n  textOf(link: Link) {\n    return textOf(link);\n  }\n\n  date(content: Content): string {\n    return this.startDate(content) + (this.endDate(content) ? ' â€“ ' + this.endDate(content) : '');\n  }\n\n  hasDate(content: Content): boolean {\n    return !!this.startDate(content);\n  }\n\n  startDate(content: Content): string {\n    return content['startDate'];\n  }\n\n  endDate(content: Content): string {\n    return content['endDate'];\n  }\n  of(content: Content, templates: TemplateRef<any>[]) {\n    switch (content.type) {\n      case ContentType.MARKDOWN: return templates[1];\n      case ContentType.TEASER: return templates[2];\n      case ContentType.HEADER: return templates[3];\n      case ContentType.SURVEY: return templates[4];\n      case ContentType.COMPONENT: return templates[5];\n      default: return templates[0];\n    }\n  }\n\n  position(content: Positionable): Position {\n    return content.position || Position.FULL;\n  }\n\n  isFull(content: Positionable): boolean {\n    return this.position(content) === Position.FULL;\n  }\n\n  isLeft(content: Positionable): boolean {\n    return this.position(content) === Position.LEFT;\n  }\n\n  isRight(content: Positionable): boolean {\n    return this.position(content) === Position.RIGHT;\n  }\n\n  isHalf(content: Positionable): boolean {\n    const pos = this.position(content);\n    return pos === Position.RIGHT || pos === Position.LEFT;\n  }\n\n  imageUrlOf(link: Link) {\n    return urlOf(link);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { DetailsComponent } from './details.component';\n\nconst routes: Routes = [{ path: '', component: DetailsComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class DetailsRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { DetailsRoutingModule } from './details-routing.module';\nimport { DetailsComponent } from './details.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { SharedModule } from '../shared/shared.module';\nimport { MarkdownModule } from 'ngx-markdown';\nimport { FunctionalProgrammingComponent } from './pages/functional-programming/functional-programming.component';\nimport { ReactiveProgrammingComponent } from './pages/reactive-programming/reactive-programming.component';\nimport { PwaWorkboxComponent } from './pages/pwa-workbox/pwa-workbox.component';\nimport { NginxRecaptchaComponent } from './pages/nginx-recaptcha/nginx-recaptcha.component';\n\n\n@NgModule({\n  declarations: [\n    DetailsComponent,\n    FunctionalProgrammingComponent,\n    ReactiveProgrammingComponent,\n    PwaWorkboxComponent,\n    NginxRecaptchaComponent\n  ],\n  imports: [\n    CommonModule,\n    DetailsRoutingModule,\n    HttpClientModule,\n    SharedModule,\n    MarkdownModule.forChild()\n  ]\n})\nexport class DetailsModule { }\n","export default \"# Why functional programming?\\n## Then:\\nWe are mostly comfortable working with single-threaded application\\nbecause, not until recently, applications used to be simple and \\nonly had to process a low amount data.\\n\\n<div class=\\\"svg-container\\\">\\n  <img style=\\\"max-width: 600px\\\" src=\\\"/assets/articles/images/og-ford-assembly-line.png\\\" alt=\\\"original Ford assembly line\\\">\\n  <sub><sub>source: https://media.ford.com/content/fordmedia/fna/us/en/features/celebrating-the-moving-assembly-line-in-pictures.html</sub></sub>\\n</div>\\n\\n## Now:\\nFast forward to recent years, our applications started becoming more\\ncomplex and required to process big amount of data. Unfortunately, \\nit would be very difficult and inefficient if we continue programming\\nour applications in a way that they only use a single main thread and\\ncannot be easily multi-threaded to be able to handle larger number of\\nrequests and data.\\n\\n<div class=\\\"svg-container\\\">\\n  <img style=\\\"max-width: 600px\\\" src=\\\"/assets/articles/images/tesla-assembly-line.png\\\" alt=\\\"Tesla assembly line\\\">\\n  <sub><sub>source: https://www.businessinsider.com/r-tesla-plans-6-day-stoppage-at-factory-for-assembly-line-fixes-sources-2018-5</sub></sub>\\n</div>\\n<br>\\n\\n## Programming Paradigms\\nFortunately, there are programming paradigms that allow us to take \\nadvantage of multiple threads in our applications without having to\\nmake our code complex and non-maintainable. Declarative Programming\\nParadigm is one that guides us in programming in a more declarative\\nway, so that it programming language can handle the complex part \\n(i.e. multi-threading). Functional Programming languages are declarative\\nprogramming languages that prevent unexpected application states, \\nunwanted data mutations, and complex/non-reusable code.\\n\\n<div class=\\\"svg-container\\\">\\n  <img style=\\\"max-width: 600px\\\" src=\\\"/assets/articles/images/programming-paradigms.svg\\\" alt=\\\"programming paradigms\\\">\\n</div>\\n\\n<br>\\n\\n## Functional vs Object-Oriented\\n|      criteria      |    functional     | object-oriented |\\n|:------------------:|:-----------------:|:---------------:|\\n|   basic elements   |     functions     |     objects     |\\n|       state        |     stateless     |    stateful     |\\n|        data        |     immutable     |     mutable     |\\n|     Iteration      |     recursive     |      loops      |\\n|      Big Data      | high performance  | not a good fit  |\\n| parallel execution |  well supported   | not a good fit  |\\n| order of execution |  does not matter  |     matters     |\\n\\n# How functional programming overcomes the challenges?\\n\\n<div class=\\\"svg-container\\\">\\n  <img style=\\\"max-width: 300px\\\" src=\\\"/assets/articles/images/fp-triangle.svg\\\" alt=\\\"fp triangle\\\">\\n</div>\\n\\nThe three key concepts of functional programming are Pure Functions, \\nData Transformation, and IO Isolation that guarantee us multi-threading,\\ncode re-usability and maintainability, and reduced unexpected behaviors.\\n\\n\\n## Pure Functions\\nA function is pure if \\n- it outputs the same value for the same input\\n- it has no side effects\\n\\n<div class=\\\"svg-container\\\">\\n  <img style=\\\"max-width: 300px\\\" src=\\\"/assets/articles/images/math-sqrt.svg\\\" alt=\\\"math sqrt function\\\">\\n</div>\\n\\nFor example, take function below that includes 250+ LOC and is very \\nspecific to parsing a particular file type and with a specific format.\\nThis function most likely has many side effects and doesn't necessarily\\noutput the same value for the same input since it depends on many IO \\noperations. Now imagine having to maintain or update this function to\\nsupport a different file type or data format; in most real world \\napplications, such function would be considered \\\"legacy\\\" and a re-write\\nwould be more preferable.\\n\\n\\n![bad code](/assets/articles/images/bad-code.png)\\n\\n\\n## Higher order function\\nA function that passes at least one of the following criteria:\\n- take one or more functions as its arguments\\n- return a function as their output\\n\\n## Data transformation over modification\\nPros of using immutable data structures:\\n- Removes the risk of race conditions \\n- Enables parallel processing \\n- Reduces the possibility of introducing bugs \\n- Eliminate errors such as null de-referencing, concurrent collection modification, etc. \\n- Reduces cognitive complexity of your code\\n\\nCons of using immutable data structures:\\n- Could be memory inefficient \\n- Some languages don't support it out of the box\\n\\n## Isolation of side effects\\nIO operations are side effects and isolating them\\n- gives us more control over them \\n- reduces the amount of integration testing required \\n- increases purity of our functions\\n\\nCombining these three concepts divides our application into a set of \\npure and reusable functions and highly isolated and controlled IO interactions.\\n\\n<div class=\\\"svg-container\\\">\\n  <img style=\\\"max-width: 500px\\\" src=\\\"/assets/articles/images/pure-v-io.svg\\\" alt=\\\"pure vs io\\\">\\n</div>\\n\\n# What does functional programming provide?\\n## Closure\\nA language feature that let's an inner function have access to \\nvariables defined in the scope of the parent function.\\n\\n```js\\nfunction assistant(name){\\n    function inner() {\\n        console.log(`Hi, I am ${name}!`);\\n    }\\n    return {\\n        introduceSelf: inner\\n    }\\n};\\nassistant('Bob').introduceSelf(); // Hi, I am Bob!\\n```\\n## Currying\\nThe technique of translating a function that takes _n_ arguments,\\nto a sequence of _n_ **nested single-argument functions**.\\n\\n\\n<div class=\\\"svg-container\\\">\\n  <img style=\\\"max-width: 300px\\\" src=\\\"/assets/articles/images/currying.svg\\\" alt=\\\"currying\\\">\\n</div>\\n\\n\\n## Partial Application\\nApplying a function with only a subset of its parameters to get a new function\\n\\n```js\\nconst add = a => b => a + b;\\n\\nconst plus5 = add(5);\\n\\nconsole.log(plus5(2)); // 7\\n```\\n\\n### Example: Caching without Currying\\n```js\\nconst computeIfNotCached = (cache, task) => {\\n  const taskName = task.name();\\n  if (!cache.contains(taskName))\\n    cache[taskName] = task();\\n  return cache[taskName];\\n}\\n\\n// non-curried usage\\ncomputeIfNotCached(lruCache, task1);\\ncomputeIfNotCached(lruCache, task2);\\n```\\n\\n\\n### Example: Curried Caching\\n```js\\nconst computeIfNotCached = cache => task => {\\n  //... unchanged ...\\n};\\n\\n// curried usage with partial application\\nconst computeIfNotLruCached = computeIfNotCached(lruCache);\\ncomputeIfNotLruCached(task1);\\ncomputeIfNotLruCached(task2);\\n```\\n\\n## Function composition\\nProcess of generating a function _h_ from two functions _f_ and _g_, given that:\\n<br>\\n\\n_h = f(g(x)) = fâ€¢g(x)_\\n\\n### Java functional interfaces\\nJava functional interfaces are some examples of what pure functions\\nshould be like. There have a generic input types (reusable), requires\\nvariables in the function to be final or effectively final (no \\nside effects), and allows for composition of functions. It is very\\nhelpful to be familiar with these functions and the number of their inputs and outputs:\\n\\n|   Function    | Inputs | Outputs |\\n|:-------------:|:------:|:-------:|\\n|   Runnable    |   0    |    0    |\\n|   Supplier    |   0    |    1    |\\n|   Consumer    |   1    |    0    |\\n|   Function    |   1    |    1    |\\n|  BiConsumer   |   2    |    0    |\\n|  BiFunction   |   2    |    1    |\\n\\n## Data Transformation Functions\\n\\n- map âœ”\\n- filter âœ”\\n- reduce âœ”\\n- ~~forEach~~\\n\\nI struck through `forEach` because I want to emphasize that we should\\navoid using it as much as possible because by definition it is\\nmeant to cause side effects. At first, it might  even seem impossible\\nto implement your desired logic without using `forEach`, but with some\\npractice, it becomes apparent that everything can be implemented using `map`,\\n`filter`, and `reduce` operations.\\n\\nIn Java, first convert a list or variable into a `Stream` or `Optional`, respectively.\\n\\n### Map\\n```Java\\nStream<R> map(Function<T, R> mapper)\\n```\\n\\nLooking at the Java declaration for `map` we can see how it takes as\\nan input a function that converts the data in a stream from a type \\n`T` to a type `R`. The picture below depicts how a function called\\n_minify_ can be passed to `map` on a stream of large marbles to\\nconvert them into smaller marbles.\\n\\n<div class=\\\"svg-container\\\">\\n  <img style=\\\"max-width: 100px\\\" src=\\\"/assets/articles/images/minify-map.svg\\\" alt=\\\"map\\\">\\n</div>\\n\\n\\n### Filter\\n```Java\\nStream<T> filter(Predicate<T> predicate)\\n```\\nLooking at the Java declaration for `filter` we can see how it\\ntakes as an input a predicate that filters the data in a stream. \\nThe picture below depicts how a predicate called _green_ can be\\npassed to `filter` on a stream of mixed-colored marbles to retain\\nonly the green ones. In other words, the predicate will be tested against\\nevery element in the stream, and only if the predicate returns true for \\nan element, then it will be kept in the stream.\\n\\n<div class=\\\"svg-container\\\">\\n  <img style=\\\"max-width: 100px\\\" src=\\\"/assets/articles/images/green-filter.svg\\\" alt=\\\"filter\\\">\\n</div>\\n\\n### Reduce\\n```Java\\n<U> U reduce(U identity,\\n             BiFunction<U, T, U> accumulator,\\n             BinaryOperator<U> combiner)\\n```\\n\\nLooking at the Java declaration for `reduce` we can see how it\\ntakes as an input an accumulator that accumulates a stream data of\\ntype `T`into a container of type `U`. The identity parameter is \\nthe initial container that should be used to accumulate elements in.\\nThe picture below depicts how an identity container (a box, ArrayList,\\nStringBuilder, etc.) is being used to accumulate each marble as they come in.\\n\\nIn other words, we give Java Stream APIs a container and a recipe \\nfor accumulating new elements into that container.\\n\\n<div class=\\\"svg-container\\\">\\n  <img style=\\\"max-width: 400px\\\" src=\\\"/assets/articles/images/acc-reduce.svg\\\" alt=\\\"reduce\\\">\\n</div>\\n\\nWe notice that reduce has an additional parameter called combiner.\\nA combiner is useful when we have multiple threads each reducing a\\nportion of our data stream, and we want to be able to combine the \\nresults coming from each thread. In that case we would need multiple\\naccumulators, each would accumulate the results of a single thread.\\n\\n<div class=\\\"svg-container\\\">\\n  <img style=\\\"max-width: 400px\\\" src=\\\"/assets/articles/images/multi-acc-reduce.svg\\\" alt=\\\"multiple reduces\\\">\\n</div>\\n\\n\\nFinally, a combiner function will take all accumulated containers\\nand combine them into a single container.\\n\\n<div class=\\\"svg-container\\\">\\n  <img style=\\\"max-width: 400px\\\" src=\\\"/assets/articles/images/combiner.svg\\\" alt=\\\"reduce combiner\\\">\\n</div>\\n\\n\\nExamples below show three different scenarios and what we need to pass to reduce in each case:\\n\\nCollect a stream of numbers as a list\\n```Java\\nnumberStream.reduce(\\n  // identity\\n  new ArrayList<>(),\\n\\n  // accumulator\\n  (list, newElement) -> { list.add(newElement); return list; },\\n\\n  // combiner\\n  (list1, list2) ->  { list1.addAll(list2); return list1; }\\n);\\n```\\n\\n\\nJoin a stream of strings as a new string:\\n```Java\\nstringStream.reduce(\\n  // identity\\n  new StringBuilder(),\\n\\n  // accumulator\\n  (sb, newElement) -> { return sb.append(newElement); },\\n\\n  // combiner\\n  (sb1, sb2) -> { return sb1.append(sb2); }\\n);\\n```\\n\\n\\nSum up a stream of numbers:\\n```Java\\nnumberStream.reduce(\\n  // identity\\n  0,\\n\\n  // accumulator\\n  (partialSum, newElement) -> { return partialSum + newElement; },\\n\\n  // combiner\\n  (partialSum1, partialSum2) -> { return partialSum1 + partialSum2; }\\n);\\n```\\n\\n## Functional programming poor practices\\n\\n1. Treating a stream of data as a for-loop:\\n\\nâœ˜ Avoid putting all the logic in `forEach`:\\n```Java\\nArrays.stream(new int[]{1, 2, 3, 4, 5})\\n  .forEach(x -> {\\n    // all of the logic\\n  })\\n```\\n\\nâœ” Instead use `map`, `filter` and `reduce`:\\n```Java\\nArrays\\n  .stream(new int[]{1, 2, 3, 4, 5})\\n  .filter(x -> x % 2 != 0) // 1, 3, 5\\n  .map(x -> 2 * x)         // 2, 6, 10\\n  .reduce(Integer::sum)    // (sum, value) -> sum + value\\n  .getAsInt();             // 18\\n```\\n\\n2. Treating an Optional as a variable:\\n\\nâœ˜ Avoid using `isPresent` and `get` on an optional:\\n\\n```Java\\nString getValidEmail(String id) {\\n    Optional<User> user = findUserById(id);\\n\\n    if (!user.isPresent() || user.get().isInactive()) {\\n        throw new BadRequest(\\\"...\\\");\\n    }\\n\\n    User activeUser = user.get();\\n    return activeUser.getEmail();\\n}\\n```\\n\\nâœ” Instead use `map`, `filter`, and `orElse`:\\n\\n```Java\\nString getValidEmail(String id) {\\n  return findUserById(id)\\n    .filter(user -> user.isActive())\\n    .map(user -> user.getEmail())\\n    .orElseThrow(() -> new BadRequest(\\\"...\\\"));\\n}\\n```\\n\";","export default \"# Intro\\n\\nNginx has many useful modules that you can take advantage of, and we will\\nuse `auth_request` module of Nginx to perform reCAPTCHA verification before\\nproxy passing requests to their corresponding back-end service.\\n\\n# Prerequisites\\n1. Your Nginx must include the `auth_request` modules \\n\\nYou first need to make sure that your NGINX is compiled with the \\n`with-http_auth_request_module` configuration option. \\nYou can run this command mentioned in the [Nginx docs][1] to verify it:\\n```bash\\n$ nginx -V 2>&1 | grep -- 'http_auth_request_module'\\n```\\n\\n2. Your front-end app must include the generated reCAPTCHA token\\nin the request\\n\\n3. You need a back-end to perform reCAPTCHA verification\\n\\nThis article assumes that you have an endpoint to verify the reCAPTCHA \\ntoken. We will call that endpoint `/api/verification/recaptcha`, but it can be anything.\\nOnce the endpoint [verifies the user's response][2], it must either return a `200` status\\ncode if the verification was successful, otherwise a `401` status code.\\n\\n# Setup\\n\\nThe first step is to create a location for your verification endpoint:\\n\\n```Nginx\\nlocation /api/verification/recaptcha {\\n    # proxy pass to your verification endpoint\\n}\\n```\\n\\nNext you need to verify the request using your reCAPTCHA verification endpoint:\\n\\n```Nginx\\nserver {\\n    # ...\\n    \\n    auth_request /api/verification/recaptcha\\n    \\n    # ...\\n}\\n```\\n\\n> Note that the `auth_request` usage is inside the `server` block of your Nginx configs\\n\\nThat's it! ðŸ¥³\\n\\nSince your endpoint returns a `401` if the verification was unsuccessful, `auth_request`\\nmodule handles that as failure, so it will not proxy pass the original request to the\\ncorresponding service.\\n\\n# High level flow diragram\\n\\nThe diagram below shows high level flow of reCAPTCHA protects your endpoints from bots. ðŸ¤–\\n\\n<div class=\\\"svg-container\\\">\\n  <img style=\\\"max-width: 800px\\\" src=\\\"/assets/articles/images/recaptcha-flow.svg\\\" alt=\\\"recaptcha verification flow\\\">\\n</div>\\n\\n1. As you can see, as soon as a user is done interacting with your page and submits a form,\\nyour front-end app will retrieve a generated token from Google. \\n\\n2. Then your app will make a http call to your back-end APIs with the reCAPTCHA token.\\n\\n3. Next, the `auth_request` module in Nginx will proxy pass the request to your reCAPTCHA\\nverification endpoint.\\n\\n4. At this point, your reCAPTCHA verification endpoint will make a call to Google to\\nverify the token generated based on the user's response. \\n\\n5. Finally, based on the response status from your reCAPTCHA verification endpoint,\\nNginx will either let the client request through or will reject it.\\n\\n\\n[1]: https://docs.nginx.com/nginx/admin-guide/security-controls/configuring-subrequest-authentication/\\n[2]: https://developers.google.com/recaptcha/docs/verify\\n\";","export default \"<div class=\\\"svg-container\\\">\\n  <img style=\\\"max-width: 300px\\\" src=\\\"/assets/articles/images/pwa-v-web-v-native.svg\\\" alt=\\\"pwa vs web vs native\\\">\\n  <sub><sub>source: https://web.dev/what-are-pwas/</sub></sub>\\n</div>\\n\\nMost of us consume our daily internet content through our favorite\\nmobile apps or by finding content using a search engine. \\nInterestingly, there seemed to be an implicit contract between \\ncompanies and users that mobile apps are more reliable, rich and \\nplatform-specific, whereas web apps are more reachable, light, \\naccessible, and platform-agnostic. PWAs are web apps packed with \\nprogressively-developed modern web APIs and features that are meant \\nto bring native-app like capabilities to web apps.\\n\\nThese are some questions a user might wonder about when using native \\nor web apps, and PWA features strive to fix them:\\n\\n- Why does app X take a lot of storage and slows down my phone?\\n- Why does the iOS version of app X have feature y but not the Android version?\\n- Why isn't web page X as smooth as the native app version?\\n- Why doesn't web app X have intuitive animations like the native app version?\\n\\n<div class=\\\"svg-container\\\">\\n  <img style=\\\"max-width: 300px\\\" src=\\\"/assets/articles/images/agnostic-v-specific.svg\\\" alt=\\\"device agnostic vs specific\\\">\\n</div>\\n\\n# How could PWAs have similar capabilities as native apps?\\n\\nPWAs are made up of two main components that enable such capabilities:\\n- [Service worker][1]: provides ability to cache for a rich offline experience, receive push notification and local notification, perform background syncs, schedule tasks , as well as geofence ([feature details][3])\\n- [Web app manifest][2]: contains a JSON that describes how the installed PWA should behave \\n\\nSome of these features are not supported by all browsers, and some are still in development stage.\\n\\n# Scope of service workers and web app manifests\\n\\nBoth the service worker script and web app manifest will have a specified\\nscope, and the [scope of the manifest][4] must be contained by the [scope of the \\nservice worker][5], otherwise it will not be registered. The scope of the service\\nworker is determined by the path it was fetched from, and the scope of the \\nmanifest is defined in the manifest JSON.\\n\\n<div class=\\\"svg-container\\\">\\n  <img style=\\\"max-width: 300px\\\" src=\\\"/assets/articles/images/simple-scope.svg\\\" alt=\\\"single sw single manifest\\\">\\n</div>\\n\\n\\nOnly one service worker can control a page and handle fetch requests,\\nso if there are multiple service workers with the same scope, the browser\\nwill choose the most updated version. However, if there are multiple service\\nworkers with overlapping scopes, then the one with more specific scope \\nwill take control of the page ([detailed explanation][6]):\\n\\n<div class=\\\"svg-container\\\">\\n  <img style=\\\"max-width: 300px\\\" src=\\\"/assets/articles/images/two-sw-scopes.svg\\\" alt=\\\"two sw and single manifiest\\\">\\n</div>\\n\\n# What do PWAs provide?\\n## Rich offline experience\\n### Service worker caching\\nService workers allow us to cache our app content during various stages \\nof the app life cycle. [The Offline Cookbook][7] documents and describe all\\ntypes of caching strategies, such as on install (precaching), \\nstale-while-revalidate, cache-only, etc. There are many caching strategies\\neach with different implementation and cache management strategies, and\\nimplementing each from scratch would be very complex and risky (cache management is not easy!).\\n\\n### Workbox\\nWorkbox is a library for adding offline support to web apps by providing\\ntools that make it easy for developers to utilize appropriate [caching \\nstrategies][8] for different resources. Workbox takes care of [precaching][9] \\nall app resources that we specify. It can also cache CDN content during\\nruntime, as well as other application assets such as images, CMS content, etc.\\n\\nHere is a sample workbox precache injection config JSON:\\n```js\\nmodule.exports = {\\n    \\\"globDirectory\\\": \\\"build/\\\", \\n    \\\"swDest\\\": \\\"build/sw.js\\\",\\n    \\\"swSrc\\\": \\\"build/rawSw.js\\\",\\n    \\\"globPatterns\\\": [\\n        \\\"**/*.{js,txt,jpg,png,json,ico,html,css,webmanifest}\\\",\\n    ]\\n};\\n```\\n\\nThis JSON specifies where workbox should scan for application files (_globDirectory_),\\nsource service worker script in which the precaching recipe should be injected (_swSrc_),\\ndestination service worker script (_swDest_), and a list of regex patterns to match \\neligible files for precaching (_globPatterns_). Here is a sample source service \\nworker script which will be used by workbox to replace _self.__WB_MANIFEST_ with\\nthe list of precache eligible files:\\n```js\\nimportScripts('https://storage.googleapis.com/workbox-cdn/releases/5.1.2/workbox-sw.js');\\n\\nif (workbox) {\\n    workbox.precaching.precacheAndRoute(self.__WB_MANIFEST);\\n} else {\\n    console.log(`Workbox didn't load successfully`);\\n}\\n```\\n\\n## Ability to install as a standalone app\\nWhen a web app has a registered service worker and a valid manifest, it is \\neligible to be installed. An installed PWA offers the same features and look \\nand feels on every device or platform, so it can be tested on a single device\\nand guaranteed the same experience on any other devices (assuming same browsers).\\nAn installed PWA could include a splash screen like any other native app, as \\nwell as app-bar theming. There are other feature in development to make PWAs \\nfunction more similar to native apps, such as running at startup.\\n\\n## Push notifications, geofencing, background sync, etc.\\nMore and more browsers are increasing support for PWA features such as push \\nnotification, and if any of these features are incorporated in a PWA, the \\nservice worker will only utilize them on browsers that support them, so the\\napp will not face any issue on browsers that do not provide support. For \\nexample, since IE does not support service workers, the page will be loaded\\nas a regular web page without any of the PWA features.\\n\\n\\n\\n[1]: https://w3c.github.io/ServiceWorker/\\n[2]: https://www.w3.org/TR/appmanifest/\\n[3]: https://whatwebcando.today/\\n[4]: https://developer.mozilla.org/en-US/docs/Web/Manifest/scope\\n[5]: https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration/scope\\n[6]: https://stackoverflow.com/questions/47137832/conflicting-service-worker-scopes-broad-vs-narrow/47149987#47149987\\n[7]: https://web.dev/offline-cookbook/\\n[8]: https://developers.google.com/web/tools/workbox/modules/workbox-strategies\\n[9]: https://developers.google.com/web/tools/workbox/modules/workbox-precaching\\n\\n\";","export default \"# Reactive programming\\n\\n\\\"In plain terms reactive programming is about non-blocking\\napplications that are asynchronous and event-driven and\\nrequire a small number of threads to scale\\\". _â€”Spring, Web Reactive Framework_\\n\\nPros\\n- Clean and understandable code\\n- Focus on What instead of How\\n- Complex operations out of the box\\n- Abort processing data when not needed (cancel)\\n\\nCons\\n- Sometimes more difficult to debug\\n- Learning curve\\n\\n# Understanding how Passive modules interact\\n\\nImagine you are building the app for a bank that allows \\nusers to transfer money, pay bills, give to charities, \\netc. all through withdrawing from their personal account.\\nThe picture below shows that in a passive world, all \\nmodules will have access to modify the Balance module \\nthrough a withdraw method. This might seem the best way \\nto build our app, but it prevents us from being able to \\nmodify or scale our Balance module. Additionally, if a \\nnew developer tries to understand how the Balance module \\nworks, they need to look at all other modules to see how\\nand when they modify the Balance module.\\n\\n<div class=\\\"svg-container\\\">\\n  <img style=\\\"max-width: 500px\\\" src=\\\"/assets/articles/images/passive.svg\\\" alt=\\\"passive programming\\\">\\n</div>\\n\\nIn a **Passive** program, other modules are aware of the main\\nmodule and will update it as needed through its _setters_ (i.e. remote updates).\\n\\n# Understanding how Reactive modules interact\\n\\nNow imagine we updated our application to be reactive. Looking \\nat picture below, we can see that other modules are unaware of \\nour Balance module, so we can easily scale and modify it as needed.\\nAlso, when a new developer joins the team, they can easily \\nunderstand how the Balance module works by only looking at the \\nevents that it subscribes to and how it reacts to those events.\\n\\nAnother main benefit of Reactive modules is that since most modules\\nbroadcast events, we can easily create new modules that could \\nlisten and react to those events, such as modules that gather\\nmetrics, send emails, etc.\\n\\n<div class=\\\"svg-container\\\">\\n  <img style=\\\"max-width: 500px\\\" src=\\\"/assets/articles/images/reactive.svg\\\" alt=\\\"reactive programming\\\">\\n</div>\\n\\nIn a **Reactive** program, other modules are NOT aware of the main module\\nand only publish events, allowing the main module to subscribe and \\n_react_ accordingly (i.e. self updates).\\n\\n# How does Reactive programming work\\n\\nReactive programs builds upon the three main [Functional Programming](/site/details?filepath=/articles/functional-programming.json) \\nideas and use the publisher-subscriber model to build functional\\nand reactive applications.\\n\\n<div class=\\\"svg-container\\\">\\n  <img style=\\\"max-width: 500px\\\" src=\\\"/assets/articles/images/event-stream.svg\\\" alt=\\\"event stream\\\">\\n</div>\\n\\n# Basic elements of publisher-subscriber model\\nTwo routes that could be taken when subscribing to a publisher:\\n\\n- next\\n- error\\n\\n\\n<div class=\\\"svg-container\\\">\\n  <img style=\\\"max-width: 100px\\\" src=\\\"/assets/articles/images/single-rail.svg\\\" alt=\\\"small rail\\\">\\n</div>\\n\\nIn an observable, **operators** can be chained to create a pipeline (rail)\\nthat process on each event in a stream, and **complete** is the last step:\\n\\n\\n<div class=\\\"svg-container\\\">\\n  <img style=\\\"max-width: 500px\\\" src=\\\"/assets/articles/images/basic-rail.svg\\\" alt=\\\"basic rail\\\">\\n</div>\\n\\n## RxJS (Front-end)\\n```js\\n// Publisher\\nObservable.create(...)\\n\\n// Pipeline\\n.pipe( \\n    .operator(...)\\n    .operator(...))\\n\\n// subscriber\\n.subscribe(val => console.log(val))\\n```\\n\\n## Reactive Spring (Back-end)\\n\\n```Java\\n// Publisher\\nFlux.just(...) \\n\\n// Pipeline\\n.operator(...)\\n.operator(...)\\n\\n// subscriber\\n.subscribe(val => console.log(val))\\n```\\n\\nFinally, **unsubscribe** from an observable to release resources and avoid memory leaks.\\n\\n## Some commonly used operators\\n\\n| Creation  | Transformation | Filtering | Combination | Error Handling |\\n|:---------:|:--------------:|:---------:|:-----------:|:--------------:|\\n|  create   |      map       |  filter   |    merge    |     catch      |\\n| interval  |    flatMap     |   take    |   concat    |     retry      |\\n|   defer   |      scan      | debounce  |   reduce    |   doOnError    |\\n\\nIn Reactive Spring, we might want to convert a `Mono` to `Flux` and vice versa:\\n\\n- Mono â†’ Flux: using `flatMapMany`\\n- Flux â†’ Mono: using collection methods (e.g. `collectList`)\\n\\n# Map, Filter and Reduce\\n\\nRxJS:\\n```js\\nconst sampleObservable$: Observable<string> = new Observable(observer => {\\n    observer.next('Hello');\\n    observer.next('Bad message');\\n    observer.next('world');\\n    observer.complete();\\n});\\n\\nsampleObservable$\\n    .pipe(\\n        map(msg => msg.toLowerCase()),\\n        filter(msg => msg.indexOf('bad') === -1)\\n    )\\n    .subscribe(\\n        nextValue => console.log(nextValue),\\n        error => console.error(error)\\n    );\\n\\n// hello\\n// world\\n```\\n\\nReactive Spring:\\n```Java\\nFlux<String> sampleFlux = Flux.create(fluxSink -> {\\n           fluxSink.next(\\\"Hello\\\");\\n           fluxSink.next(\\\"Bad message\\\");\\n           fluxSink.next(\\\"world\\\");\\n           fluxSink.complete();\\n        });\\n\\nsampleFlux.map(String::toLowerCase)\\n          .filter(message -> !message.contains(\\\"bad\\\"))\\n          .subscribe(\\n\\t\\t\\t\\tnextValue -> log.info(nextValue),\\n\\t\\t\\t\\terror -> log.error(error)\\n\\t\\t\\t);\\n\\n// hello\\n// world\\n```\\n\\n# Logging\\n\\n```js\\nof('hello', 'world')\\n    .pipe(\\n        tap(x => console.debug('__ORIGINAL_CONTENT__:', x)),\\n        map(msg => msg.toUpperCase()),\\n        tap(x => console.debug('__MAPPED_CONTENT__  :', x)),\\n    )\\n    .subscribe(\\n        nextValue => console.log(nextValue),\\n        error => console.error(error)\\n    );\\n\\n//__ORIGINAL_CONTENT__: hello\\n// __MAPPED_CONTENT__ : HELLO\\n// HELLO\\n// __ORIGINAL_CONTENT__: world\\n// __MAPPED_CONTENT__ : WORLD\\n// WORLD\\n```\\n\\n```Java\\nFlux.just(\\\"Hello\\\", \\\"world\\\")\\n    .log(\\\"__ORIGINAL_CONTENT__\\\")\\n    .map(String::toUpperCase)\\n    .log(\\\"__MAPPED_CONTENT__\\\")\\n    .subscribe(\\n\\t\\tnextValue -> log.info(nextValue),\\n\\t\\terror -> log.error(error)\\n\\t);\\n\\n// __ORIGINAL_CONTENT__: onNext(Hello)\\n// __MAPPED_CONTENT__  : onNext(HELLO)\\n//                     : HELLO\\n// __ORIGINAL_CONTENT__: onNext(world)\\n// __MAPPED_CONTENT__  : onNext(WORLD)\\n//                     : WORLD\\n```\\n\\n\\n# Error handling\\n\\n```js\\nconst observable$: Observable<string> = new Observable(observer => {\\n    observer.next('hello');\\n    observer.error('source error');\\n    observer.next('world');\\n    observer.complete();\\n});\\n\\nobservable$\\n    .pipe(\\n        //catchError(err => of('fallback message')),\\n        map(msg => msg.toLowerCase())\\n    )\\n    .subscribe(\\n        nextValue => console.log(nextValue),\\n        error => console.error(\\\"subscribe error callback:\\\", error)\\n    );\\n\\n/* Output as is: */\\n// Hello\\n// subscribe error callback: source error\\n\\n/* Output after uncommenting .catchError: */\\n// Hello\\n// fallback message\\n```\\n\\n```Java\\nFlux<String> sampleFlux = Flux.create(fluxSink -> {\\n            fluxSink.next(\\\"Hello\\\");\\n            fluxSink.next(\\\"bad message\\\");\\n            fluxSink.error(new RuntimeException(\\\"source error\\\"));\\n            fluxSink.next(\\\"world\\\");\\n            fluxSink.complete();\\n        });\\nsampleFlux\\n\\t//.onErrorReturn(\\\"fallback message\\\")\\n\\t.map(this::throwIfBadMessage)\\n\\t//.onErrorContinue((error, event) -> log.error(\\\"error '{}' occurred on: '{}'\\\", error.getMessage(), event))\\n\\t.subscribe(\\n\\t\\tnextValue -> log.info(nextValue),\\n\\t\\terror -> log.error(\\\"subscribe error callback: {}\\\", error.getMessage())\\n\\t);\\n\\n/* Output as is: */\\n// Hello\\n// subscribe error callback: no bad messages!\\n\\n/* Output if we ONLY uncomment .onErrorReturn: */\\n// Hello\\n// subscribe error callback: no bad messages!\\n\\n/* Output if we ONLY uncomment .onErrorContinue: */\\n// Hello\\n// error 'no bad messages!' occurred on: 'bad message'\\n// subscribe error callback: source error\\n\\n/* Output if we uncomment BOTH .onErrorReturn and .onErrorContinue: */\\n// Hello\\n// error 'no bad messages!' occurred on: 'bad message'\\n// fallback message\\n```\\n\\n> Any error occurred while processing an eventâ€”â€”from the stream of \\n> events being publishedâ€”â€”would stop the rest of the events in the \\n> stream from being published, regardless of whether or not the error is handled.\\n\\n\\n# Publish/subscribe on different schedulers\\n\\n<div class=\\\"svg-container\\\">\\n  <img style=\\\"max-width: 700px\\\" src=\\\"/assets/articles/images/subPubOn.svg\\\" alt=\\\"multi subscribeoOn publishOn\\\">\\n</div>\\n\\n\\nBy default in Reactive Spring, the subscribe function is executed on\\nthe thread the publisher is subscribed to and is a blocking call. To\\nensure the call to `subscribe` is non-blocking, we can add a call to \\n`subscribeOn` and pass a desired scheduler, before the subscription in the pipeline:\\n\\n```Java\\nFlux.just(\\\"Hello\\\", \\\"world\\\")\\n    //.subscribeOn(Schedulers.newSingle(\\\"<subscribe-thread>\\\"))\\n    .subscribe(log::info);\\nlog.info(\\\"subscribed successfully!\\\")\\n\\n/* Output when ran as is: */\\n// <main-thread> : hello\\n// <main-thread> : world\\n// <main-thread> : subscribed successfully!\\n\\n/* Output after uncommenting .subscribeOn: */\\n// <main-thread> : subscribed successfully!\\n// <sub-thread>  : hello\\n// <sub-thread>  : world\\n```\\n\\nSimilarly, by default all operators in a subscriber's pipeline will be\\nexecuted on the thread the publisher is subscribed to. We enforce a \\ncertain operator to be published on a different thread of a scheduler\\nby adding a call to `pushlishOn` and pass a desired scheduler, before \\nthe operator in the pipeline:\\n\\n```Java\\nFlux.just(\\\"Hello\\\", \\\"Bad message\\\", \\\"world\\\")\\n    //.publishOn(Schedulers.newSingle(\\\"<op-1-thread>\\\"))\\n    .map(String::toLowerCase)\\n    .log(\\\"__MAPPED__\\\")\\n    //.publishOn(Schedulers.newSingle(\\\"<op-2-thread>\\\"))\\n    .filter(msg -> !msg.contains(\\\"bad\\\"))\\n    .log(\\\"__FILTERED__\\\")\\n    .subscribe(log::info);\\n\\n/* Output when ran as is: */\\n// <main-thread> __MAP__   : | onNext(hello)\\n// <main-thread> __MAP__   : | onNext(bad message)\\n// <main-thread> __MAP__   : | onNext(world)\\n// <main-thread> __FILTER__: | onNext(hello)\\n// <main-thread>           : hello\\n// <main-thread> __FILTER__: | onNext(world)\\n// <main-thread>           : world\\n\\n/* Output after uncommenting .publishOn: */\\n// <op-1-thread> __MAP__   : | onNext(hello)\\n// <op-1-thread> __MAP__   : | onNext(bad message)\\n// <op-1-thread> __MAP__   : | onNext(world)\\n// <op-2-thread> __FILTER__: | onNext(hello)\\n// <op-2-thread>           : hello\\n// <op-2-thread> __FILTER__: | onNext(world)\\n// <op-2-thread>           : world\\n```\\n\\n> If you are using the RxJS library, you can publish your observable on\\n> a built-in or custom scheduler. For example, if you want to animate\\n> a DOM element, you can do so using the `animationFrameScheduler` provided in the Rx library.\\n\\n# Parallel processing on different schedulers\\n\\n<div class=\\\"svg-container\\\">\\n  <img style=\\\"max-width: 700px\\\" src=\\\"/assets/articles/images/parallel.svg\\\" alt=\\\"parallel processing\\\">\\n</div>\\n\\n\\nBy default, in Reactive Spring, all events from a publisher are processed\\non the same thread (rail). You can distribute a stream of events between \\nmultiple threads by providing a desired scheduler with a pool of threads\\nwhen subscribing to the publisher:\\n\\n```Java\\nFlux.just(\\\"Hello\\\", \\\"Bad message\\\", \\\"world\\\")\\n\\t//.parallel()\\n\\t//.runOn(Schedulers.newElastic(\\\"my-pool\\\"))\\n    .map(String::toLowerCase)\\n    .log(\\\"__MAPPED__\\\")\\n    .filter(msg -> !msg.contains(\\\"bad\\\"))\\n    .log(\\\"__FILTERED__\\\")\\n    .subscribe(log::info);\\n\\n/* Output when ran as is (or after ONLY uncommenting .parallel): */\\n// <main-thread> __MAP__   : | onNext(hello)\\n// <main-thread> __MAP__   : | onNext(bad message)\\n// <main-thread> __MAP__   : | onNext(world)\\n// <main-thread> __FILTER__: | onNext(hello)\\n// <main-thread>           : hello\\n// <main-thread> __FILTER__: | onNext(world)\\n// <main-thread>           : world\\n\\n/* Output after uncommenting BOTH .parallel and .runOn: */\\n// <my-pool-3> __MAP__   : | onNext(world)\\n// <my-pool-4> __MAP__   : | onNext(hello)\\n// <my-pool-2> __MAP__   : | onNext(bad message)\\n// <my-pool-4> __FILTER__: | onNext(hello)\\n// <my-pool-2> __FILTER__: | onNext(world)\\n// <my-pool-4>           : world\\n// <my-pool-2>           : hello\\n```\\n\\n> A scheduler with some threads is required for multi-threaded processing.\\n> Either a custom scheduler or one of the provided schedulers\\n> (i.e. single, parallel, elastic, boundedElastic) can be used.\\n\\n\\n\\n\\n\";"],"x_google_ignoreList":[]}